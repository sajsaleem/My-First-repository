using UnityEngine;
using System.Collections;
public class machoscript : MonoBehaviour {
	public float speed;//speed per unit of machowalk
    private float moveforce = 365f;// force to move character from idle state 
    public bool faceright = true;// to check if player is facing right 
    private Vector2 movement;// to get Vector2(x,y) directional movement
    protected Animator myanim; 
    private float stopspeed = 0.0f; //to stop macho 
	public GUITexture RightButton;// includes guitexture in the script
	public GUITexture LeftButton;
	public GUITexture ActionButton;
	public bool moveright=false; //bool var to check which way macho should move
	public bool moveleft=false; 
	void awake() { 
    }
    
	// Use this for initialization
	void Start () {
        //to get component of animator 
        myanim = GetComponent<Animator>();
	}
	
	// Update is called once per frame
    void Update()
    {
		// if screen is touched or mouse button 0 clicked
		if (Input.GetMouseButtonDown (0)) {
			//tests if rightbutton guitexture hit my mouse through Main Camera
			if(RightButton.HitTest(Input.mousePosition,Camera.main)){
				moveright=true;
				movement = new Vector2 (speed * moveforce*Time.deltaTime, 0);


			}
			if(LeftButton.HitTest(Input.mousePosition,Camera.main)){
				Debug.Log ("touch rightbutton");
				moveleft=true;
			}
			if(ActionButton.HitTest(Input.mousePosition,Camera.main)){
				myanim.SetBool("MachoAttack",true);
			}
		
		}

		if (Input.GetMouseButtonUp (0)) {
		
			moveleft=moveright=false;
			rigidbody2D.velocity=Vector2.zero;
			myanim.SetFloat("Speed",stopspeed);
			myanim.SetBool("MachoAttack",false);
		
		}
		EnforceBounds ();
		}


       
    void FixedUpdate() {
		if (moveright) {
		if(!faceright)
				Flip();
			myanim.SetFloat("Speed",speed);
			rigidbody2D.AddForce(movement);
		
		}
		if (moveleft) {
			if(faceright)
				Flip();
			myanim.SetFloat("Speed",speed);
			rigidbody2D.AddForce(-movement);
			
		}
    }

    void Flip() {
        faceright = !faceright;
        Vector3 thescale = transform.localScale;
        thescale.x *= -1;
        transform.localScale = thescale;
    }

	void EnforceBounds(){
		// temp var to store current position of Macho
		Vector3 newPos = transform.position;
		// temp var to store Camera.main 
		Camera mainCamera = Camera.main;
		// temp var to store position of main camera from origin 0
		Vector3 CamPos = mainCamera.transform.position;
		// gives half width of Camera View 
		float xdist = mainCamera.aspect * mainCamera.orthographicSize;
		//adds half xdist width to middle co-ordinate x(0) to get max width
		float xmax = CamPos.x + xdist;
		//subtracts half xdist width to middle co-ordinate x(0) to get min width
		float xmin = CamPos.x - xdist;
		//condition to check if position of macho is greater than max Camera view or less than min
		if (newPos.x > xmax || newPos.x < xmin) {
		// forces position of macho to be inside xmax and xmin
			newPos.x=Mathf.Clamp(newPos.x,xmin,xmax);
		}
		transform.position = newPos;

	}
}
